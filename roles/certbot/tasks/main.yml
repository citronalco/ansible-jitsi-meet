- name: Install Certbot
  apt:
    pkg: [ 'certbot', 'python3-certbot-nginx' ]

- name: Check if certificate already exists
  stat:
    path: "/etc/letsencrypt/live/{{ item }}/cert.pem"
  register: letsencrypt_cert
  loop: "{{ ( [ inventory_hostname, turns_hostname ] + jitsi.domain_aliases | default([]) ) | select('defined') | list }}"

- name: Stop Nginx to allow certbot to generate a cert
  service:
    name: "nginx"
    state: stopped
  when: letsencrypt_cert.results | selectattr('stat.exists','equalto', false) | list | count > 0

- name: Generate new certificate
  command: >
    certbot certonly --standalone --noninteractive --agree-tos --email {{ admin.email }}
    -d {{ item }}
  loop: "{{ ( [ inventory_hostname, turns_hostname ] + jitsi.domain_aliases | default([]) ) | select('defined') | list }}"
  args:
    creates: "/etc/letsencrypt/live/{{ item }}/cert.pem"
  notify:
    - run post renewal hook

- name: Start Nginx after cert has been generated
  service:
    name: "nginx"
    state: started
  when: letsencrypt_cert.results | selectattr('stat.exists','equalto', false) | list | count > 0

- name: Add pre hook to certbot to stop Nginx before certificate renewal
  template:
    src: "pre-hook.sh.j2"
    dest: "/etc/letsencrypt/renewal-hooks/pre/hook.sh"
    mode: 0770

- name: Add post hook to certbot to start Nginx and deploy certs to Coturn after certificate renewal
  template:
    src: "post-hook.sh.j2"
    dest: "/etc/letsencrypt/renewal-hooks/post/hook.sh"
    mode: 0770
